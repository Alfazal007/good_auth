import { NextRequest } from "next/server";
import jwt, { JwtPayload } from "jsonwebtoken"
import { decodeBase64 } from 'tweetnacl-util'
import nacl from 'tweetnacl'

/**
 * Authenticates a request using the provided API key.
 *
 * @param req - The incoming Next.js request object.
 * @param apiKey - The API key extracted from the URL parameters, this is the public api key generated by organization.
 * @returns A boolean indicating whether the request is authenticated or not.
 */
export function auth(req: NextRequest, apiKey: string): boolean {
    const email = req.cookies.get("email")?.value;
    const token = req.cookies.get("accessToken")?.value;
    if (!email || !token) {
        return false
    }
    return isUserAuthenticated(token, apiKey, email)
}

function isUserAuthenticated(token: string, apiKey: string, email: string): boolean {
    const [tokenValid, tokenData] = verifyToken(token)
    if (!tokenValid) {
        return false
    }
    const signedEmail = tokenData.signature
    return verifyEmailSignature(email, signedEmail, apiKey)
}

function verifyToken(token: string): [boolean, any] {
    try {
        const isVerifiedData = jwt.verify(token, process.env.JSONWEBTOKENSECRET as string) as JwtPayload
        return [true, isVerifiedData]
    } catch (err) {
        return [false, null]
    }
}

function verifyEmailSignature(email: string, signatureBase64: string, publicKeyBase64: string): boolean {
    const publicKey = decodeBase64(publicKeyBase64)
    const signature = decodeBase64(signatureBase64)
    const message = new TextEncoder().encode(email)
    return nacl.sign.detached.verify(message, signature, publicKey)
}
